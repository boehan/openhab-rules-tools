[
  {
    "uid":"rules_tools:mqtt_eb_online",
    "label":"ONLINE Status Publisher",
    "description":"Publishes ONLINE as a retained message to the LWT topic.",
    "configDescriptions":[
      {
        "name":"broker",
        "type":"TEXT",
        "context":"thing",
        "label":"MQTT Broker Thing",
        "description":"Select the MQTT Broker Thing used for the MQTT Event Bus",
        "required":true
      },
      {
        "name":"topicRoot",
        "type":"TEXT",
        "label":"openHAB Instance Name",
        "description":"Name of this openHAB instance, used as the root of the topic structure.",
        "required":true
      }
    ],
    "triggers": [
      {
        "id":"1",
        "label":"Broker Thing changes to ONLINE",
        "description":"",
        "configuration": {
          "thingUID":"mqtt:broker:argus",
          "status":"ONLINE"
        },
        "type":"core.ThingStatusChangeTrigger"
      }
    ],
    "conditions": [],
    "actions": [
      "inputs": {},
      "id": "2",
      "label":"Publish ONLINE to the LWT topic as retained",
      "configuration": {
        "type":"application/javascript",
        "script":"var Log = Java.type('org.openhab.core.model.script.actions.Log');\nvar topic = '${topicRoot}/status';\nLog.logInfo('MQTT_EB', 'Publishing online message');\nvar mqtt = actions.get('mqtt', '${broker}');\nmqtt.publishMQTT(topic,'ONLINE', true);"
      },
      "type":"script.ScriptAction"
    ]
  },
  {
    "uid":"rules_tools:mqtt_eb_pub",
    "label":"MQTT Event Bus Publish",
    "description":"Publishes updates and commands for Items to the MQTT Event Bus.",
    "configDescription":[
      {
        "name":"broker",
        "type":"TEXT",
        "context":"thing",
        "label":"MQTT Broker Thing",
        "description":"Select the MQTT Broker Thing used for the MQTT Event Bus",
        "required":true
      },
      {
        "name":"topicRoot",
        "type":"TEXT",
        "label":"openHAB Instance Name",
        "description":"Name of this openHAB instance, used as the root of the topic structure.",
        "required":true
      },
      {
        "name":"cmd",
        "type":"TEXT",
        "context":"item",
        "filterCriteria": [
          {
            "value":"Group",
            "name":"type"
          }
        ],
        "description":"Group Item whose member's commands should be published.",
        "required":true
      },
      {
        "name":"upd",
        "type":"TEXT",
        "context":"item",
        "filterCriteria": [
          {
            "value":"Group",
            "name":"type"
          }
        ],
        "description":"Group Item whose member's updates should be published.",
        "required":true
      }
    ],
    "triggers": [
      {
        "id":"1",
        "label":"Publish Commands",
        "description":"Triggers the rules when members of ${cmd} receive a command.",
        "configuration": {
          "groupName":"${cmd}"
        },
        "type":"core.GroupStateCommandTrigger"
      },
      {
        "id":"1",
        "label":"Publish Updates",
        "description":"Triggers the rules when members of ${upd} receive an update.",
        "configuration": {
          "groupName":"${upd}"
        },
        "type":"core.GroupStateUpdateTrigger"
      }
    ],
    "conditions": [],
    "actions": [
      {
        "inputs": {},
        "id": "3",
        "label":"Publish the event to the MQTT Event Bus",
        "description":"",
        "configuration": {
          "type":"application/javascript",
          "script":"var Log = Java.type('org.openhab.core.model.script.actions.Log');\nvar isState = (event.itemState !== undefined);\nvar topic = ${topicRoot} + '/out/' + event.itemName + ((isState) ? '/state' : '/command');\nvar msg = ((isState) ? event.itemState : event.itemCommand).toString();\nLog.logDebug('MQTT_EB', 'Topic: ' + topic + ' Message: ' + msg + ' Retained: ' + isState);\nvar mqtt = actions.get('mqtt', '${broker}');\nmqtt.publishMQTT(topic, msg, isState); // retained true for updates"
        },
        "type":"script.ScriptAction"
      }
    ]
  },
  {
    "uid":"rules_tools:mqtt_eb_sub",
    "label":"MQTT Event Bus Subscribe",
    "description":"Processes messages from an MQTT Event Bus.",
    "configDescription":[
      {
        "name":"broker",
        "type":"TEXT",
        "context":"thing",
        "label":"MQTT Broker Thing",
        "description":"Select the MQTT Broker Thing used for the MQTT Event Bus",
        "required":true
      },
      {
        "name":"channel",
        "type":"TEXT",
        "context":"channel",
        "filterCriteria": [
          {
            "value":"TRIGGER",
            "name":"kind"
          }
        ],
        "label":"MQTT Event Channel",
        "description":"The MQTT trigger channel that subscribes to the MQTT Event Bus.",
        "required":true
      }
    ],
    "triggers": [
      {
        "id":"1",
        "label":"Received MQTT Event Bus Message",
        "description":"Triggers when a message is received on the wild card subscription event channel.",
        "configuration": {
          "thingUID":"${broker}",
          "channelUID":"${channel}"
        },
        "type":"core.ChannelEventTrigger"
      }
    ],
    "conditions": [],
    "actions": [
      "inputs": {},
      "id": "2",
      "label":"Process incoming MQTT Event Bus Message",
      "description":"Parses the incoming message using the topic to identify the Item to command or update.",
      "configuration": {
        "type":"application/javascript",
        "script":"var Log = Java.type('org.openhab.core.model.script.actions.Log');\nvar parts = event.event.split('#');\nvar topic = parts[0];\nvar state = parts[1];\nparts = topic.split('/');\nvar item_name = parts[2];\nvar event_type = parts[3];\nLog.logDebug('MQTT EB','Received EB message: type = ' + event_type + ' item = ' + item_name + ' state/cmd = ' + state);\nif(items[item_name] === undefined) {\n  Log.logWarn('MQTT EB','Received an MQTT EB message for an Item that doesn't exist locally: ' + item_name);\n}\nelse {\n  (event_type == 'command') ? events.sendCommand(item_name, state) : events.postUpdate(item_name, state);\n}"
      },
      "type": "script.ScriptAction"
    ]
  }
]

